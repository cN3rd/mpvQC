name: Build

on:
  push:
    branches: [ 'we-ignore-this-since-everything-is-broken' ]

defaults:
  run:
    shell: bash


env:
  mpvqc_env_file: build-variables.txt


jobs:
  extract-version-information:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set version string
        run: |
          hash_current_commit=$(git rev-parse HEAD)
          hash_latest_tag=$(git rev-list --tags --max-count=1)
          tag=$(git describe --tags --abbrev=0)

          if [ "$hash_current_commit" = "$hash_latest_tag" ]; then
              echo "mpvqc_version=$tag" >> ${{ env.mpvqc_env_file }}
          else
              echo "mpvqc_version=$tag-${hash_current_commit:0:8}" >> ${{ env.mpvqc_env_file }}
          fi

          echo "mpvqc_tag=$tag" >> ${{ env.mpvqc_env_file }}
          echo "mpvqc_commit=${hash_current_commit:0:8}" >> ${{ env.mpvqc_env_file }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.mpvqc_env_file }}
          path: ${{ env.mpvqc_env_file }}

  build-project:
    runs-on: ubuntu-latest
    needs:
      - extract-version-information

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install pip
        run: |
          python -m pip install --upgrade pip

      - name: Update packages
        run: |
          sudo apt update -y && sudo apt upgrade -y

      - name: Install dependencies
        # Currently we need to install 'qttools5-dev-tools' to use the 'lrelease' command
        run: |
          sudo apt install -y make libmpv1 qttools5-dev-tools patchelf libopengl0

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install -r requirements.txt

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.mpvqc_env_file }}

      - name: Set build version information
        run: |
          source ${{ env.mpvqc_env_file }}
          sed -i "s/^tag=.*/tag=$mpvqc_tag/" data/build-info.conf
          sed -i "s/^commit=.*/commit=$mpvqc_commit/" data/build-info.conf

      - name: Test, clean & build application
        run: |
          source venv/bin/activate
          make test
          make clean
          make build

      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

  build-linux:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - build-project

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Download AppImageTool
        run: |
          wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -O "appimagetool"
          chmod +x appimagetool

      - name: Install appimage-builder
        run: |
          source venv/bin/activate
          python3 -m pip install appimage-builder wheel

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.mpvqc_env_file }}

      - name: Read build versioning information
        run: |
          source ${{ env.mpvqc_env_file }}
          echo "mpvqc_version=$mpvqc_version" >> $GITHUB_ENV

      - name: Adjust app image version
        run: |
          sed -i "s/@@MPVQC_VERSION@@/${{ env.mpvqc_version }}/" build-aux/linux/AppImageBuilder.yml

      - name: Build AppImage
        run: |
          source venv/bin/activate
          export PATH="$(pwd):$PATH"
          python3 -m appimagebuilder --recipe build-aux/linux/AppImageBuilder.yml
      - uses: actions/upload-artifact@v2
        with:
          name: "mpvQC-${{ env.mpvqc_version }}-linux"
          path: './*.AppImage*'

  build-windows:
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - build-project

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/Scripts/activate
          python -m pip install -r requirements.txt

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.mpvqc_env_file }}

      - name: Read build versioning information
        run: |
          source ${{ env.mpvqc_env_file }}
          echo "mpvqc_version=$mpvqc_version" >> $GITHUB_ENV

      - name: Install pyinstaller
        run: |
          source venv/Scripts/activate
          python -m pip install pyinstaller

      - name: Build Windows bundle
        run: |
          source venv/Scripts/activate
          pyinstaller \
            --name mpvQC \
            --workpath build-windows \
            --icon=build-aux/windows/icon.ico \
            --collect-data PySide6 \
            --add-data "LICENSE;." \
            --noconsole \
            build/main.py

      - name: Create zip file
        # todo Remove zipping because that leads to double zipped files
        # But because we are limited on storage in a private repo, we keep the zipping step for now :)
        run: |
          cd dist
          powershell Compress-Archive "mpvQC" "mpvQC-${{ env.mpvqc_version }}-windows.zip"

      - uses: actions/upload-artifact@v2
        with:
          name: "mpvQC-${{ env.mpvqc_version }}-windows"
          path: "dist/mpvQC-${{ env.mpvqc_version }}-windows.zip"
