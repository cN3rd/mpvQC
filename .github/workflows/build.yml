name: Build

on:
  push:
    branches: [ 'never' ]

defaults:
  run:
    shell: bash

jobs:
  build-project:
    runs-on: ubuntu-22.04
    name: 'Python'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Set Build Version Information'
        run: |
          PLACEHOLDER_TAG=">>>tag<<<"
          PLACEHOLDER_COMMIT=">>>commit-id<<<"

          CURRENT_TAG="$(git describe --tags --abbrev=0)"
          CURRENT_COMMIT="$(git rev-parse HEAD)"
          CURRENT_COMMIT="${CURRENT_COMMIT:0:8}"
          
          grep -rli "$PLACEHOLDER_TAG" * | xargs -i@ sed -i "s/$PLACEHOLDER_TAG/$CURRENT_TAG/g" @
          grep -rli "$PLACEHOLDER_COMMIT" * | xargs -i@ sed -i "s/$PLACEHOLDER_COMMIT/$CURRENT_COMMIT/g" @
          
          grep -rli "$CURRENT_COMMIT" * | xargs -i@ cat @
#      - name: 'Install Python'
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.10'
#      - name: 'Install pip'
#        run: |
#          python -m pip install --upgrade pip
#      - name: 'Update Packages'
#        run: |
#          sudo apt update -y && sudo apt upgrade -y
#      - name: 'Install Dependencies'
#        run: |
#          sudo apt install -y make libmpv1 patchelf libopengl0
#      - name: 'Create Virtual Environment'
#        run: |
#          python -m venv venv
#          source venv/bin/activate
#          python -m pip install wheel pytest-tap
#          python -m pip install -r requirements.txt
#      - name: 'Test, Clean & Build Application'
#        run: |
#          source venv/bin/activate
#          make test-python
#          make clean
#          make build
#      - name: 'Upload Build Artifact'
#        uses: actions/upload-artifact@v2
#        with:
#          name: build
#          path: build

#  build-linux:
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    needs:
#      - build-project
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Python 3.9
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: build
#          path: build
#
#      - name: Create virtual environment
#        run: |
#          python -m venv venv
#          source venv/bin/activate
#
#      - name: Download AppImageTool
#        run: |
#          wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -O "appimagetool"
#          chmod +x appimagetool
#
#      - name: Install appimage-builder
#        run: |
#          source venv/bin/activate
#          python3 -m pip install appimage-builder wheel
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.mpvqc_env_file }}
#
#      - name: Read build versioning information
#        run: |
#          source ${{ env.mpvqc_env_file }}
#          echo "mpvqc_version=$mpvqc_version" >> $GITHUB_ENV
#
#      - name: Adjust app image version
#        run: |
#          sed -i "s/@@MPVQC_VERSION@@/${{ env.mpvqc_version }}/" build-aux/linux/AppImageBuilder.yml
#
#      - name: Build AppImage
#        run: |
#          source venv/bin/activate
#          export PATH="$(pwd):$PATH"
#          python3 -m appimagebuilder --recipe build-aux/linux/AppImageBuilder.yml
#      - uses: actions/upload-artifact@v2
#        with:
#          name: "mpvQC-${{ env.mpvqc_version }}-linux"
#          path: './*.AppImage*'
#
#  build-windows:
#    runs-on: windows-latest
#    if: github.ref == 'refs/heads/main'
#    needs:
#      - build-project
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Python 3.9
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: build
#          path: build
#
#      - name: Create virtual environment
#        run: |
#          python -m venv venv
#          source venv/Scripts/activate
#          python -m pip install -r requirements.txt
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.mpvqc_env_file }}
#
#      - name: Read build versioning information
#        run: |
#          source ${{ env.mpvqc_env_file }}
#          echo "mpvqc_version=$mpvqc_version" >> $GITHUB_ENV
#
#      - name: Install pyinstaller
#        run: |
#          source venv/Scripts/activate
#          python -m pip install pyinstaller
#
#      - name: Build Windows bundle
#        run: |
#          source venv/Scripts/activate
#          pyinstaller \
#            --name mpvQC \
#            --workpath build-windows \
#            --icon=build-aux/windows/icon.ico \
#            --collect-data PySide6 \
#            --add-data "LICENSE;." \
#            --noconsole \
#            build/main.py
#
#      - name: Create zip file
#        # todo Remove zipping because that leads to double zipped files
#        # But because we are limited on storage in a private repo, we keep the zipping step for now :)
#        run: |
#          cd dist
#          powershell Compress-Archive "mpvQC" "mpvQC-${{ env.mpvqc_version }}-windows.zip"
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: "mpvQC-${{ env.mpvqc_version }}-windows"
#          path: "dist/mpvQC-${{ env.mpvqc_version }}-windows.zip"
